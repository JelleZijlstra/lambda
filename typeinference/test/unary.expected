%%stdout%%
8
Result: module
	let to_integer = \n. (match (n : nat/0) with Zero -> (0 : int) | Succ n' -> ((1 : int) + ((to_integer : nat/0 -> int) (n' : nat/0) : int) : int) : int)
	let plus = \n1. (\n2 : nat/0. (match (n1 : nat/0) with Zero -> (n2 : nat/0) | Succ n1' -> (((plus : nat/0 -> nat/0 -> 'typevar/16 (= nat/0)) (n1' : nat/0) : nat/0 -> 'typevar/16 (= nat/0)) (((Succ : nat/0 -> nat/0) (n2 : nat/0) : nat/0)) : 'typevar/16 (= nat/0)) : nat/0) : nat/0 -> nat/0)
	let of_integer = \n. (match (n : int) with 0 -> (Zero : nat/0) | _ when ((n : int) > (0 : int) : bool) -> ((Succ : nat/0 -> nat/0) (((of_integer : int -> nat/0) ((n : int) - (1 : int) : int) : nat/0)) : nat/0) : nat/0)
	let mult = \n1. (\n2 : nat/0. (match (n1 : nat/0) with Zero -> (Zero : nat/0) | Succ n1' -> (((plus : nat/0 -> nat/0 -> 'typevar/16 (= nat/0)) (n2 : nat/0) : nat/0 -> 'typevar/16 (= nat/0)) ((((mult : nat/0 -> nat/0 -> nat/0) (n1' : nat/0) : nat/0 -> nat/0) (n2 : nat/0) : nat/0)) : nat/0) : nat/0) : nat/0 -> nat/0)
	let exp = \n1. (\n2 : nat/0. (match (n2 : nat/0) with Zero -> ((Succ : nat/0 -> nat/0) (Zero : nat/0) : nat/0) | Succ n2' -> (((mult : nat/0 -> nat/0 -> nat/0) (n1 : nat/0) : nat/0 -> nat/0) ((((exp : nat/0 -> nat/0 -> nat/0) (n1 : nat/0) : nat/0 -> nat/0) (n2' : nat/0) : nat/0)) : nat/0) : nat/0) : nat/0 -> nat/0)
	let __result__ = ()
end
%%stderr%%
