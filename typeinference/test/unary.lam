data nat = Zero | Succ nat

let rec of_integer = \n. match n with {
	0 -> Zero
	| _ when n > 0 -> Succ (of_integer (n - 1))
}

let rec to_integer = \n. match n with {
	Zero -> 0
	| Succ n' -> 1 + to_integer n'
}

let rec plus = \n1. \n2. match n1 with {
	Zero -> n2
	| Succ n1' -> plus n1' (Succ n2)
}

let rec mult = \n1. \n2. match n1 with {
	Zero -> Zero
	| Succ n1' -> plus n2 (mult n1' n2)
}

let rec exp = \n1. \n2. match n2 with {
	Zero -> Succ Zero
	| Succ n2' -> mult n1 (exp n1 n2')
}

;;

print (to_integer (exp (Succ (Succ Zero)) (Succ (Succ (Succ Zero)))))
