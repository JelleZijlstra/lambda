%%stdout%%
1
2
3
4
1000000
1
2
4
3
1000000
1
4
2
3
1000000
4
1
2
3
1000000
1
3
2
4
1000000
1
3
4
2
1000000
1
4
3
2
1000000
4
1
3
2
1000000
3
1
2
4
1000000
3
1
4
2
1000000
3
4
1
2
1000000
4
3
1
2
1000000
2
1
3
4
1000000
2
1
4
3
1000000
2
4
1
3
1000000
4
2
1
3
1000000
2
3
1
4
1000000
2
3
4
1
1000000
2
4
3
1
1000000
4
2
3
1
1000000
3
2
1
4
1000000
3
2
4
1
1000000
3
4
2
1
1000000
4
3
2
1
1000000
Result: module
	let revappend = \l1. \l2 : 'typevar35. match l1 with Nil -> l2 | Cons hd tl -> revappend tl (Cons hd l2)
	let reduce = \b. \f : 'typevar19. \l : 'typevar20. match l with Nil -> b | Cons hd tl -> f hd (reduce b f tl)
	let print_perms = \perms. match perms with Nil -> () | Cons hd tl -> print_list hd; print 1000000; print_perms tl
	let print_list = \lst. match lst with Nil -> Nil | Cons hd tl -> print hd; print_list tl
	let permutations = \lst. match lst with Nil -> Cons Nil Nil | Cons hd tl -> flatten (map (intersperse hd) (permutations tl))
	let map = \f. \l : 'typevar2. match l with Nil -> Nil | Cons hd tl -> Cons (f hd) (map f tl)
	let make_list = \n. if n = 0 then Nil else Cons n (make_list n - 1)
	let intersperse = \elt. \lst : 'typevar58. Cons (Cons elt lst) match lst with Nil -> Nil | Cons hd tl -> map (Cons hd) (intersperse elt tl)
	let flatten = \l. match l with Nil -> b | Cons hd tl -> f hd (reduce b f tl)
	let __result__ = ()
end
%%stderr%%
