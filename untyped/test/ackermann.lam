let id = \x. x in
let true = \a. \b. a in
let false = \a. \b. b in
let not = \m. m (\a. \b. b) (\a. \b. a) in

let zero = \f. \x. x in
let succ = \n. \f. \x. f (n f x) in
let plus = \m. \n. \f. \x. m f (n f x) in
let mult = \m. \n. \f. m (n f) in
let exp = \m. \n. n m in
let pred = \n. \f. \x. n (\g. \h. h (g f)) (\u. x) (\u. u) in
let sub = \m. \n. (n pred) m in
let iszero = \n. n (\x. false) true in

let decode = \n. n (\x. x + 1) 0 in

let Z = \f. (\x. f (\y. x x y)) (\x. f (\y. x x y)) in

let ack' = \f. \m. \n. ((iszero m)
	(\x. succ n)
	(\x. ((iszero n)
		(\x. f (pred m) (succ zero))
		(\x. f (pred m) (f m (pred n)))) id)) id in
let ack = Z ack' in

let pair = \x. \y. \z. z x y in
let fst = \p. p true in
let snd = \p. p false in

let nil = pair true true in
let isnil = fst in
let cons = \h. \t. pair false (pair h t) in
let head = \z. fst (snd z) in
let tail = \z. snd (snd z) in


let one = succ zero in
let two = succ one in
let three = succ (succ (succ zero)) in
let four = succ three in
let five = succ four in
let six = succ five in
let x = print (decode (ack three three)) in
let x = print (decode (ack three two)) in

let mylist = cons four (cons three (cons two (cons five (cons one (cons six nil))))) in

let map' = \map. \f. \lst. ((isnil lst)
	(\x. nil)
	(\x. cons (f (head lst)) (map f (tail lst)))) id in
let map = Z map' in

let reduce' = \reduce. \f. \u. \lst. ((isnil lst)
	(\x. u)
	(\x. f (head lst) (reduce f u (tail lst)))) id in
let reduce = Z reduce' in

let length = reduce (\elt. \l. l + 1) 0 in

let filter = \f. reduce (\elt. \lst. (f elt (\x. cons elt lst) (\x. lst)) id) nil in

let less' = \less. \m. \n. ((iszero m) (\x. not (iszero n)) (\x. ((iszero n)
	(\x. false)
	(\x. less (pred m) (pred n))) id)) id in
let less = Z less' in

let greater = \m. \n. less n m in
let leq = \m. \n. not (greater m n) in
let geq = \m. \n. not (less m n) in
let equals = \m. \n. (less m n) false (not (greater m n)) in

let reversetwo = \revtwo. \lst. \accum. ((isnil lst)
	(\x. accum)
	(\x. revtwo (tail lst) (cons (head lst) accum))) id
in
let revappend = Z reversetwo in
let reverse = \lst. revappend lst nil in

let append = \lst1. \lst2. revappend (reverse lst1) lst2 in

let qsort' = \qsort. \lst. ((isnil lst)
	(\x. nil)
	(\x.
		let hd = head lst in
		let tl = tail lst in
		let left = qsort(filter (\elt. less elt hd) tl) in
		let right = qsort(filter (\elt. not (less elt hd)) tl) in
		append left (cons hd right))) id in
let qsort = Z qsort' in

let split' = \split. \lst. \l. \r. ((isnil lst)
	(\x. pair l r)
	(\x. split (tail lst) r (cons (head lst) l))) id in
let split = Z split' in

let merge' = \merge. \l. \r. ((isnil l)
	(\x. r)
	(\x. ((isnil r)
		(\x. l)
		(\x.
			let lhd = head l in
			let ltl = tail l in
			let rhd = head r in
			let rtl = tail r in
			((less lhd rhd)
				(\x. cons lhd (merge ltl r))
				(\x. cons rhd (merge l rtl))) id)) id)) id in
let merge = Z merge' in

let mergesort' = \mergesort. \lst. (((isnil lst) true (isnil (tail lst)))
	(\x. lst)
	(\x.
		let lists = split lst nil nil in
		let l = fst lists in
		let r = snd lists in
		merge (mergesort l) (mergesort r))) id in
let mergesort = Z mergesort' in

let bubblesort = \lst.
	let bubble' = \bubble. \lst.
		# lst will never be nil
		let hd = head lst in
		let tl = tail lst in
		((isnil tl)
			(\x. lst)
			(\x.
				let hd' = head tl in
				let tl' = tail tl in
				((less hd hd')
					(\x. cons hd (bubble tl))
					(\x. cons hd' (bubble (cons hd tl')))) id)) id in
	let bubble = Z bubble' in

	reduce (\x. bubble) lst lst in

let insertionsort = \lst.
	let insert' = \insert. \elt. \lst. ((isnil lst)
		(\x. cons elt nil)
		(\x.
			let hd = head lst in
			let tl = tail lst in
			((less elt hd)
				(\x. cons elt lst)
				(\x. cons hd (insert elt tl))) id)) id in
	let insert = Z insert' in
	reduce insert nil lst in

let printlist = map (\x. print (decode x)) in

let selectionsort =
	let smallest' = \smallest. \lst.
		let hd = head lst in
		let tl = tail lst in
		((isnil tl)
			(\x. pair hd nil)
			(\x.
				let p = smallest tl in
				let small = fst p in
				let rest = snd p in
				((less hd small)
					(\x. pair hd tl)
					(\x. pair small (cons hd rest))) id)) id in
	let smallest = Z smallest' in
	let sort' = \sort. \lst.
		((isnil lst)
			(\x. lst)
			(\x.
				let p = smallest lst in
				cons (fst p) (sort (snd p)))) id in
	Z sort' in

let smallerlist = filter (\elt. less elt four) mylist in
let x = map (\x. print (decode x)) smallerlist in
let x = print 100 in

let numlist = map decode mylist in
let x = map (\x. print x) numlist in


let x = print 100 in
let x = printlist (qsort mylist) in

let x = print 101 in
let x = printlist (selectionsort mylist) in
let x = print 100 in
let x = printlist (mergesort mylist) in
let x = print 100 in
let x = printlist (bubblesort mylist) in
let x = print 100 in
let x = printlist (insertionsort mylist) in

let x = print 100 in
#let p = smallest mylist in
#let x = print (decode (fst p)) in
#let x = print 100 in
#let x = printlist (snd p) in

#let x = print 100 in
#let lists = split mylist nil nil in
#let x = printlist (fst lists) in
#let x = print 100 in
#let x = printlist (snd lists) in

#let lst1 = cons one (cons two (cons three nil)) in
#let lst2 = cons four (cons five (cons six nil)) in
#let merged = merge lst1 lst2 in
#let x = printlist merged in

let makelist' = \makelist. \n. ((iszero n)
	(\x. nil)
	(\x. cons n (makelist (pred n)))) id in
let makelist = Z makelist' in

let ten = mult two five in
let hundred = mult ten ten in
let fifty = mult five ten in

let long_list = makelist fifty in

#let sorted_list = qsort long_list in

#let x = printlist sorted_list in

let x = print 100 in

print (length numlist)
